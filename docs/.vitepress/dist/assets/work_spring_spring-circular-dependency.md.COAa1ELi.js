import{_ as k,D as E,c as r,b as e,w as s,a3 as l,j as a,a as n,a2 as p,o as i,I as h}from"./chunks/framework.BBCWOUBu.js";const j=JSON.parse('{"title":"什么是循环依赖？","description":"","frontmatter":{},"headers":[],"relativePath":"work/spring/spring-circular-dependency.md","filePath":"work/spring/spring-circular-dependency.md"}'),g={name:"work/spring/spring-circular-dependency.md"},d=a("h1",{id:"什么是循环依赖",tabindex:"-1"},[n("什么是循环依赖？ "),a("a",{class:"header-anchor",href:"#什么是循环依赖","aria-label":'Permalink to "什么是循环依赖？"'},"​")],-1),c=a("p",null,"循环依赖就是循环引用，就是两个或多个bean相互之间的持有对方。比如CircleA引用CircleB，CircleB引用CircleC，CircleC引用CircleA。",-1),o=p(`<h1 id="spring如何解决循环依赖" tabindex="-1">Spring如何解决循环依赖？ <a class="header-anchor" href="#spring如何解决循环依赖" aria-label="Permalink to &quot;Spring如何解决循环依赖？&quot;">​</a></h1><p>Spring容器循环依赖包括如下两种：</p><ol><li>构造器循环依赖</li><li>setter循环依赖</li></ol><p>构造器循环依赖，表示通过构造器注入的循环依赖，此依赖是无法解决的，只能抛出<code>BeanCurrentlyInCreationException</code>异常。</p><p>原型模式下的依赖检查，只有单例模式下才会尝试解决循环依赖，原型模式下直接抛出异常<code>BeanCurrentlyInCreationException</code>异常。</p><p><strong>代码片段1</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AbstractBeanFactory抽象类：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Fail if we&#39;re already creating this bean instance:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// We&#39;re assumably within a circular reference.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isPrototypeCurrentlyInCreation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BeanCurrentlyInCreationException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>单例模式下，setter循环依赖可以解决</strong>(使用@Async的单例除外，特殊情况下会报错）</p><p><strong>单例模式下，构造器循环依赖无法解决</strong></p><p><strong>原型模式下，循环依赖无法解决</strong></p><h1 id="spring-循环依赖场景分析" tabindex="-1">Spring 循环依赖场景分析 <a class="header-anchor" href="#spring-循环依赖场景分析" aria-label="Permalink to &quot;Spring 循环依赖场景分析&quot;">​</a></h1><p>不管是单例 Bean还是prototype Bean，注入Bean的逻辑起点都是在<code>AbstractBeanFactory.java</code>中的 <code>getBean</code>方法。</p><p>以a，b 两个bean互相依赖为例，假设Spring容器先加载 a 后加载 b，时序图如下：</p>`,13),y=p(`<p>从上面的时序图可以看出主要的流程，涉及到 AbstractBeanFactory、DefaultSingletonBeanRegistry、AbstractAutowireCapableBeanFactory 三个类。</p><p><strong>代码片段2</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.java</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * Return the (raw) singleton object registered under the given name.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * &lt;p&gt;Checks already instantiated singletons and also allows for an early</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * reference to a currently created singleton (resolving a circular reference).</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> beanName</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> the name of the bean to look for</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> allowEarlyReference</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> whether early references should be created or not</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@return</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> the registered singleton object, or {@code null} if none found</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	protected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSingleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String beanName, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> allowEarlyReference) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		Object singletonObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.singletonObjects.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (singletonObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isSingletonCurrentlyInCreation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			synchronized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.singletonObjects) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				singletonObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.earlySingletonObjects.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (singletonObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> allowEarlyReference) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">					ObjectFactory&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; singletonFactory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.singletonFactories.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">					if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (singletonFactory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">						singletonObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> singletonFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">						this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.earlySingletonObjects.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName, singletonObject);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">						this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.singletonFactories.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">					}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (singletonObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NULL_OBJECT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> singletonObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span></code></pre></div><p>bean加载时，从一开始的 调用 <code>getSingleton()</code> 方法从单例缓存中获取说起。</p><p><strong>这个方法中涉及到三个缓存：</strong></p><p><strong>代码片段3</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/** Cache of singleton objects: bean name --&gt; bean instance */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Map&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; singletonObjects </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcurrentHashMap&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/** Cache of singleton factories: bean name --&gt; ObjectFactory */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Map&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ObjectFactory&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; singletonFactories </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HashMap&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ObjectFactory&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/** Cache of early singleton objects: bean name --&gt; bean instance */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Map&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; earlySingletonObjects </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HashMap&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li>singletonObjects 一级缓存，存放最终版Bean</li><li>earlySingletonObjects 二级缓存，存放单例工厂创建的对象</li><li>singletonFactories 三级缓存，存放单例工厂（是一个函数）</li></ul><p>这就是我们常说的三级缓存，第一级是<code>singletonObjects</code> ，第二级是<code>earlySingletonObjects </code> ,第三级是 <code>singletonFactories </code></p><p>getSingleton()方法整个过程如下：</p><p>首先从单例对象缓存<code>singletonObjects</code> 中获取，如果没有，且通过<code>isSingletonCurrentlyInCreation()</code> 方法判断当前要获取的bean正在处于创建中，那么就从<code>earlySingletonObjects </code> 二级缓存中获取，如果还没有</p><p>则从<code>singletonFactories </code> 三级缓存中获取。获取到的话，就通过<code>singletonFactory.getObject()</code>获取对象，并将其加入到二级缓存当中，从三级缓存当中删除。</p><p>这时候肯定有疑问，缓存中的数据是从哪里来的呢？</p><p>一直往下跟代码我们会发现<code>doCreateBean()</code> 方法</p><p><strong>代码片段4</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sharedInstance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getSingleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ObjectFactory&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">						@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">						public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BeansException {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">							try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">								return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName, mbd, args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">							}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">							catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (BeansException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">								// Explicitly remove instance from singleton cache: It might have been put there</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">								// eagerly by the creation process, to allow for circular reference resolution.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">								// Also remove any beans that received a temporary reference to the bean.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">								destroySingleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">								throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ex;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">							}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">						}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">					});</span></span></code></pre></div><p><strong>AbstractAutowireCapableBeanFactory 中：</strong></p><p><strong>代码片段5</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * Central method of this class: creates a bean instance,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * populates the bean instance, applies post-processors, etc.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@see</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #doCreateBean</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	protected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String beanName, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RootBeanDefinition mbd, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			throws BeanCreationException {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isDebugEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Creating instance of bean &#39;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> beanName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// Make sure bean class is actually resolved at this point.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		resolveBeanClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mbd, beanName);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// Prepare method overrides.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			mbd.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prepareMethodOverrides</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (BeanDefinitionValidationException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BeanDefinitionStoreException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mbd.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getResourceDescription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">					beanName, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Validation of method overrides failed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ex);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			Object bean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resolveBeforeInstantiation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName, mbd);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (bean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bean;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Throwable </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BeanCreationException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mbd.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getResourceDescription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), beanName,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">					&quot;BeanPostProcessor before instantiation of bean failed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ex);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		Object beanInstance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doCreateBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName, mbd, args);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isDebugEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Finished creating instance of bean &#39;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> beanName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> beanInstance;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span></code></pre></div><p>doCreateBean()：</p><p><strong>代码块6</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Eagerly cache singletons to be able to resolve circular references</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// even when triggered by lifecycle interfaces like BeanFactoryAware.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> earlySingletonExposure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (mbd.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isSingleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.allowCircularReferences </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">				isSingletonCurrentlyInCreation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (earlySingletonExposure) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isDebugEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Eagerly caching bean &#39;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> beanName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">						&quot;&#39; to allow for resolving potential circular references&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			addSingletonFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ObjectFactory&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BeansException {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">					return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getEarlyBeanReference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName, mbd, bean);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span></code></pre></div><p><strong>我们可以看到 <code>earlySingletonExposure</code>是true的时候，才会调用<code>addSingletonFactory()</code></strong> <strong>将bean对象加入到三级缓存当中。</strong></p><p><code>earlySingletonExposure</code> 为true 的前提是：</p><ul><li>bean是单例的</li><li>bean 允许提前引用</li><li>当前bean正在创建当中</li></ul><p><strong>addSingletonFactory() 代码如下:</strong></p><p><strong>代码片段7</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addSingletonFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String beanName, ObjectFactory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> singletonFactory) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		Assert.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">notNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(singletonFactory, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Singleton factory must not be null&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		synchronized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.singletonObjects) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.singletonObjects.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">containsKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName)) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">				this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.singletonFactories.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName, singletonFactory);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">				this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.earlySingletonObjects.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">				this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.registeredSingletons.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span></code></pre></div><p>【操作三级缓存】将bean添加到三级缓存，从二级缓存中删掉</p><p>那么一级缓存是在哪里添加的呢？</p><p>前边我们看到的 <code>doCreateBean()</code> 方法其实来自匿名内部类 <code>new ObjectFactory&lt;Object&gt;() {}</code> 重写的<code>getObject()</code> 方法</p><p><strong>代码片段8</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Create bean instance.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (mbd.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isSingleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">					sharedInstance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getSingleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ObjectFactory&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">						@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">						public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BeansException {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">							try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">								return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName, mbd, args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">							}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">							catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (BeansException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">								// Explicitly remove instance from singleton cache: It might have been put there</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">								// eagerly by the creation process, to allow for circular reference resolution.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">								// Also remove any beans that received a temporary reference to the bean.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">								destroySingleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">								throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ex;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">							}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">						}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">					});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">					bean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getObjectForBeanInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sharedInstance, name, beanName, mbd);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				}</span></span></code></pre></div><p>在调用 <code>getSingleton()</code> 方法时， <code>getSingleton()</code> 方法中( DefaultSingletonBeanRegistry )，调用了上边重写的<code>getObject()</code> 方法后，后边调用了<code>addSingleton(beanName, singletonObject);</code></p><p><strong>addSingleton(beanName, singletonObject) 方法如下：</strong></p><p><strong>代码片段9</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * Add the given singleton object to the singleton cache of this factory.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * &lt;p&gt;To be called for eager registration of singletons.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> beanName</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> the name of the bean</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> singletonObject</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> the singleton object</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addSingleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String beanName, Object singletonObject) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		synchronized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.singletonObjects) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.singletonObjects.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName, (singletonObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> singletonObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NULL_OBJECT));</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.singletonFactories.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.earlySingletonObjects.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.registeredSingletons.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span></code></pre></div><p>【操作三级缓存】添加到一级缓存，从二级缓存中删掉，从三级缓存中删掉，将已经创建成功的bean添加<code>registeredSingletons </code>集合中。</p><h1 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h1><p>至此，Spring 关于 singleton bean 循环依赖已经分析完毕了。所以我们基本上可以确定 Spring 解决循环依赖的方案了。</p><h2 id="如何避免循环依赖导致的一直寻找对方的问题" tabindex="-1">如何避免循环依赖导致的一直寻找对方的问题？ <a class="header-anchor" href="#如何避免循环依赖导致的一直寻找对方的问题" aria-label="Permalink to &quot;如何避免循环依赖导致的一直寻找对方的问题？&quot;">​</a></h2><p>Spring 在创建 bean 的时候并不是等它完全完成，而是在创建过程中将创建中的 bean 的 ObjectFactory 提前曝光，也就是通过加入到 singletonFactories 缓存中的<code>ObjectFactory</code>来实现，代码在上文的<code>addSingletonFactory()</code> 代码（代码片段7），这样一旦下一个 bean 创建的时候需要依赖 bean ，则直接使用 ObjectFactory 的 <code>getObject()</code> 获取了，也就是调用了 <code>getSingleton()</code> 中的代码片段了（代码片段8）。</p><p>以A，B两个Bean互相依赖为例，在获取A Bean的时候，发现三级缓存中都是空的，则走后续实例化Bean的逻辑，将自己的ObjectFactory放到三级缓存当中，再接着进行加载自己依赖的其他属性，这时候去加载B Bean，同样的流程，B Bean也将自己的ObjectFactory放入到三级缓存中，再接着加载自己依赖的A Bean。这时候从三级缓存中获取到 A Bean ，同时将获取到的Bean放到二级缓存中。继续走后面的初始化逻辑。这时B就加载到了早期的A Bean。A Bean 继续走后续逻辑就成了一个完整的Bean。</p><p>最后来描述一下Spring循环依赖解决的过程：首先 A 完成初始化第一步并将自己提前曝光出来（通过 ObjectFactory 将自己提前曝光），在初始化的时候，发现自己依赖对象 B，此时就会去尝试 get(B)，这个时候发现 B 还没有被创建出来，然后 B 就走创建流程，在 B 初始化的时候，同样发现自己依赖 C，C 也没有被创建出来，这个时候 C 又开始初始化进程，但是在初始化的过程中发现自己依赖 A，于是尝试 get(A)，这个时候由于 A 已经添加至缓存中（一般都是添加至三级缓存 singletonFactories ），通过 ObjectFactory 提前曝光，所以可以通过 <code>ObjectFactory.getObject()</code> 拿到 A 对象，C 拿到 A 对象后顺利完成初始化，然后将自己添加到一级缓存中，回到 B ，B 也可以拿到 C 对象，完成初始化，A 可以顺利拿到 B 完成初始化。到这里整个链路就已经完成了初始化过程了。</p><p>参考</p><ul><li><a href="https://juejin.cn/post/7264527436871991330?searchId=20231112004017356A78977AAA9825DB48" target="_blank" rel="noreferrer">从源码层面深度剖析Spring循环依赖 | 京东云技术团队</a></li></ul>`,47);function A(F,B,b,D,C,u){const t=E("Mermaid");return i(),r("div",null,[d,c,(i(),e(l,null,{default:s(()=>[h(t,{id:"mermaid-6",class:"mermaid my-class",graph:"graph%20LR%3B%0AA--%3EB%0AB--%3EC%0AC--%3EA%0A"})]),fallback:s(()=>[n(" Loading... ")]),_:1})),o,(i(),e(l,null,{default:s(()=>[h(t,{id:"mermaid-53",class:"mermaid my-class",graph:"sequenceDiagram%3B%0A%20%20%20%20%23%20%E8%B5%B7%E5%88%AB%E5%90%8D%0A%20%20%20%20participant%20A%20as%20AbstractBeanFactory.java%0A%20%20%20%20participant%20D%20as%20DefaultSingletonBeanRegistry.java%0A%20%20%20%20participant%20AF%20as%20AbstractAutowireCapableBeanFactory.java%0A%20%20%20%20%23%20%E5%BC%80%E5%A7%8B%E7%94%BB%E6%97%B6%E5%BA%8F%E5%9B%BE%0A%20%20%20%20A-%3E%3ED%3AgetBean(%22a%22)%0A%20%20%20%20Note%20over%20A%2CD%3A%20%E9%A6%96%E6%AC%A1%E8%8E%B7%E5%8F%96Bean%20a%0A%20%20%20%20D-%3E%3ED%3AgetSingleton(%22a%22%2C%20true)%0A%20%20%20%20Note%20over%20D%2CD%3A%E5%9C%A8%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E4%B8%AD%E6%9F%A5%E6%89%BEBean%20a%20%E4%B8%BA%E7%A9%BA%0A%20%20%20%20D%20-%3E%3E%20D%3Athis.singletonFactories.get(%22a%22)%E4%B8%BA%E7%A9%BA%0A%20%20%20%20Note%20over%20D%2CD%3A%E5%9C%A8%E4%BA%8C%E7%BA%A7%E5%92%8C%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98%E4%B8%AD%E6%9F%A5%E6%89%BEBean%20a%20%E4%B8%BA%E7%A9%BA%0A%20%20%20%20D--%3E%3EA%3A%20%E8%BF%94%E5%9B%9E%20sharedInstance%20%22a%22%20%E4%B8%BA%E7%A9%BA%EF%BC%88%E7%BC%93%E5%AD%98%E9%87%8C%E6%B2%A1%E6%9C%89%EF%BC%89%0A%20%20%20%20A-%3E%3ED%3A%20getSingleton(%22a%22%2C%20ObjectFactory%3C%3F%3E%20singletonFactory)%0A%20%20%20%20D%20--%3E%3E%20D%3A%20singletonFactory.getObject()%0A%20%20%20%20Note%20over%20D%2CD%3A%20%E8%B0%83%E7%94%A8%E7%9A%84%E6%98%AF%20createBean(beanName%2C%20mbd%2C%20args)%E6%96%B9%E6%B3%95%0A%20%20%20%20D-%3E%3EAF%3A%20createBean(%22a%22%2C%20mbd%2C%20args)%0A%20%20%20%20AF--%3E%3EAF%3A%20doCreateBean(%22a%22%2C%20mbdToUse%2C%20args)%0A%20%20%20%20AF--%3E%3EAF%3AcreateBeanInstance(%22a%22%2C%20mbd%2C%20args)%20%E5%AE%9E%E4%BE%8B%E5%8C%96%0A%20%20%20%20AF--%3E%3EAF%3AaddSingletonFactory(%22a%22%2C%20singletonFactory)%20%E6%B7%BB%E5%8A%A0%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%0A%20%20%20%20Note%20over%20AF%3A%20%E6%94%BE%E7%BD%AE%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98%20key%20%E6%98%AF%20beanName%2Cvalue%E6%98%AFObjectFactory%20%E5%AE%9E%E7%8E%B0%E6%98%AFgetEarlyBeanReference(beanName%2C%20mbd%2C%20bean))%0A%20%20%20%20AF--%3E%3EAF%3ApopulateBean%EF%BC%8C%E5%AF%BB%E6%89%BE%E6%B3%A8%E5%85%A5%E6%89%80%E4%BE%9D%E8%B5%96%E7%9A%84%22b%22%0A%20%20%20%20AF--%3E%3E%20A%3A%20getBean(%22b%22)%0A%20%20%20%20A-%3E%3ED%3AgetSingleton(%22b%22%2C%20true)%0A%20%20%20%20D--%3E%3EA%3A%20%E8%BF%94%E5%9B%9E%20sharedInstance%20%22b%22%20%E4%B8%BA%E7%A9%BA%EF%BC%88%E7%BC%93%E5%AD%98%E9%87%8C%E6%B2%A1%E6%9C%89%EF%BC%89%0A%20%20%20%20A-%3E%3ED%3A%20getSingleton(%22b%22%2C%20ObjectFactory%3C%3F%3E%20singletonFactory)%0A%20%20%20%20D%20--%3E%3E%20D%3A%20singletonFactory.getObject()%0A%20%20%20%20D-%3E%3EAF%3A%20createBean(%22b%22%2C%20mbd%2C%20args)%0A%20%20%20%20AF--%3E%3EAF%3A%20doCreateBean(%22b%22%2C%20mbdToUse%2C%20args)%0A%20%20%20%20AF--%3E%3E%20AF%3AcreateBeanInstance(%22b%22%2C%20mbd%2C%20args)%20%E5%AE%9E%E4%BE%8B%E5%8C%96%0A%20%20%20%20AF--%3E%3E%20AF%3AaddSingletonFactory(%22b%22%2C%20singletonFactory)%20%E6%B7%BB%E5%8A%A0%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%0A%20%20%20%20AF--%3E%3E%20AF%3ApopulateBean%EF%BC%8C%E5%AF%BB%E6%89%BE%E6%B3%A8%E5%85%A5%E6%89%80%E4%BE%9D%E8%B5%96%E7%9A%84%22a%22%0A%20%20%20%20AF%20--%3E%3E%20A%3A%20getBean(%22a%22)%0A%20%20%20%20A-%3E%3E%20D%3AgetBean(%22a%22A-%3E%3E%20D%3AgetBean(%22a%22tA-%3E%3E%20D%3AgetBean(%22a%22A-%3E%3E%20D%3AgetBean(%22a%22t)%0A%20%20%20%20A-%3E%3ED%3AgetSingleton(%22a%22%2C%20true)%0A%20%20%20%20%20%20%20%20D%20--%3E%3ED%3Athis.singletonFactories.get(%22a%22)%EF%BC%88%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98%E6%9C%89a%E5%80%BC%EF%BC%89%0A%20%20%20%20D%20--%3E%3E%20D%3AsingletonFactory.getObject()%0A%20%20%20%20D-%3E%3E%20AF%3A%20getEarlyBeanReference%20%E8%8E%B7%E5%8F%96%E6%97%A9%E6%9C%9F%E7%9A%84Bean%20%22a%22%0A%20%20%20%20AF%20--%3E%3E%20AF%3A%20%E8%8B%A5%E6%9C%89AOP%EF%BC%8C%E4%BC%9A%E6%8F%90%E5%89%8D%E5%A4%84%E7%90%86AOP%E7%9B%B8%E5%85%B3%E9%80%BB%E8%BE%91%0A%20%20%20%20AF%20--%3E%3E%20D%3A%20exposedObject%0A%20%20%20%20D%20--%3E%3ED%3A%20%E6%8A%8A%20Bean%20%22a%22%20%E6%94%BE%E5%88%B0%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%EF%BC%8C%E7%A7%BB%E9%99%A4%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98%0A%20%20%20%20D%20--%3E%3E%20A%3A%E8%BF%94%E5%9B%9E%E6%8F%90%E6%97%A9%E6%9A%B4%E9%9C%B2%E7%9A%84Bean%20%22a%22%0A%20%20%20%20A%20-%3E%3E%20AF%3A%20%E8%BF%94%E5%9B%9EBean%20%22a%22%2C%E5%B0%86%22a%22%E6%B3%A8%E5%85%A5%E5%88%B0%20%22b%22%E5%BD%93%E4%B8%AD(b%E7%BB%88%E4%BA%8E%E6%89%BE%E5%88%B0a%E4%BA%86)%0A%20%20%20%20AF%20--%3E%3E%20AF%3AinitializeBean(%22b%22%2C%20exposedObject%2C%20mbd)%EF%BC%8C%E6%9C%89AOP%E7%9A%84%E8%AF%9D%EF%BC%8C%E4%BC%9A%E5%9C%A8%E8%BF%99%E9%87%8C%E5%A4%84%E7%90%86%0A%20%20%20%20AF--%3E%3EAF%3AObject%20earlySingletonReference%20%3D%20getSingleton(%22b%22%2C%20false)%20%E4%B8%BAnull%EF%BC%8C%E5%9B%A0%E4%B8%BA%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E4%B8%AD%E4%B8%BA%E7%A9%BA%0A%20%20%20%20AF--%3E%3EAF%3AexposedObject%20!%3D%20earlySingletonReference%20%E8%BF%94%E5%9B%9E%20b%0A%20%20%20%20AF%20--%3E%3E%20D%3A%E8%BF%94%E5%9B%9E%0A%20%20%20%20D%20--%3E%3E%20D%3AaddSingleton(%22b%22%2C%20singletonObject)%EF%BC%8C%E6%94%BE%E5%88%B0%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E4%B8%AD%0A%20%20%20%20D%20--%3E%3E%20A%3A%20%E8%BF%94%E5%9B%9Eb%20(getSingleton(%22b%22%2C%20ObjectFactory%3C%3F%3E%20singletonFactory))%0A%20%20%20%20A%20-%3E%3E%20AF%3A%20a%E7%BB%88%E4%BA%8E%E6%89%BE%E5%88%B0%E4%BA%86%E4%BE%9D%E8%B5%96%E7%9A%84b%0A%20%20%20%20AF%20--%3E%3E%20AF%3AinitializeBean(%22a%22%2C%20exposedObject%2C%20mbd)%EF%BC%8C%E6%9C%89AOP%E7%9A%84%E8%AF%9D%E4%BC%9A%E5%9C%A8%E6%AD%A4%E5%A4%84%E7%90%86%0A%20%20%20%20AF--%3E%3EAF%3AObject%20earlySingletonReference%20%3D%20getSingleton(%22a%22%2C%20false)%EF%BC%8C%E8%BF%99%E9%87%8C%E8%BF%94%E5%9B%9E%20a%20%E4%B8%8D%E6%98%AFnull%EF%BC%8C%E5%9B%A0%E4%B8%BA%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E9%87%8C%E6%9C%89a%0A%20%20%20%20AF--%3E%3EAF%3AexposedObject%20%3D%20earlySingletonReference%20%E8%BF%94%E5%9B%9E%20a%0A%20%20%20%20AF%20--%3E%3E%20A%3A%E8%BF%94%E5%9B%9Ea%20%0A"})]),fallback:s(()=>[n(" Loading... ")]),_:1})),y])}const v=k(g,[["render",A]]);export{j as __pageData,v as default};
