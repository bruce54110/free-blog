import{_ as l,D as n,c as h,b as e,w as i,a3 as k,a2 as a,o as s,I as p,a as r}from"./chunks/framework.BBCWOUBu.js";const m=JSON.parse('{"title":"Java线程池知识点梳理","description":"","frontmatter":{},"headers":[],"relativePath":"work/java/java-thread-pool.md","filePath":"work/java/java-thread-pool.md"}'),d={name:"work/java/java-thread-pool.md"},E=a('<h1 id="java线程池知识点梳理" tabindex="-1">Java线程池知识点梳理 <a class="header-anchor" href="#java线程池知识点梳理" aria-label="Permalink to &quot;Java线程池知识点梳理&quot;">​</a></h1><h2 id="什么是线程池" tabindex="-1">什么是线程池？ <a class="header-anchor" href="#什么是线程池" aria-label="Permalink to &quot;什么是线程池？&quot;">​</a></h2><p>线程在系统中创建的成本是相对比较高的，所以使用”池化“的思想，设计线程池，有大量任务需要执行时，可以直接从线程池中使用已经创建好的线程直接去执行。减少线程的创建和销毁带来的开销，线程池通过工作队列和线程管理来实现高效的任务执行。使用少量的线程数满足最大的吞吐量。</p><p>线程池的主要组成部分包括<strong>工作线程、任务队列、线程管理器等</strong>。线程池的设计有助于优化多线程程序的性能和资源利用，同时简化了线程的管理和复用的复杂性。</p><h2 id="线程池的实现" tabindex="-1">线程池的实现 <a class="header-anchor" href="#线程池的实现" aria-label="Permalink to &quot;线程池的实现&quot;">​</a></h2><p>Java线程池的核心实现类是ThreadPoolExecutor，主要类图如下：</p>',6),o=a(`<h3 id="线程池的状态" tabindex="-1">线程池的状态 <a class="header-anchor" href="#线程池的状态" aria-label="Permalink to &quot;线程池的状态&quot;">​</a></h3><ol><li>RUNNING： 线程池一旦被创建，就处于RUNNING状态，任务数为0，能够接收新任务，对已排队的任务进行处理。</li><li>SHUTDOWN：不接收新任务，但能处理已排队的任务。当调用线程池的shutdown()方法时，线程池会由RUNNING转变为SHUTDOWN状态。</li><li>STOP：不接收新任务，不处理已排队的任务，并且会中断正在处理的任务。当调用线程池的shutdownNow()方法时，线程池会由RUNNING或SHUTDOWN转变为STOP状态。</li><li>TIDYING：当线程池在SHUTDOWN状态下，任务队列为空且执行中任务为空，或者线程池在STOP状态下，线程池中执行中任务为空时，线程池会变为TIDYING状态，会执行terminated()方法。这个方法在线程池中是空实现，可以重写该方法进行相应的处理。</li><li>TERMINATED：线程池彻底终止。线程池在TIDYING状态执行完terminated()方法后，就会由TIDYING转变为TERMINATED状态。</li></ol><h4 id="如何保存线程状态" tabindex="-1">如何保存线程状态 <a class="header-anchor" href="#如何保存线程状态" aria-label="Permalink to &quot;如何保存线程状态&quot;">​</a></h4><p><strong>ThreadPoolExecutor</strong> 源码中线程池的运行状态<strong>使用 ctl 高3位保存运行状态，低29位保存有效的工作线程数</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AtomicInteger ctl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AtomicInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ctlOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RUNNING, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COUNT_BITS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Integer.SIZE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CAPACITY   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COUNT_BITS) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // runState is stored in the high-order bits</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RUNNING    </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COUNT_BITS;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SHUTDOWN   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COUNT_BITS;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> STOP       </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COUNT_BITS;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TIDYING    </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COUNT_BITS;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TERMINATED </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COUNT_BITS;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Packing and unpacking ctl</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c)     { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CAPACITY; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> workerCountOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c)  { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CAPACITY; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ctlOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rs, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wc) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wc; }</span></span></code></pre></div><p><code>COUNT_BITS</code>被定义为<code>Integer.SIZE - 3</code>，即32位整数的29位，每个线程池状态（如<code>RUNNING</code>、<code>SHUTDOWN</code>等）都是通过将一个整数<strong>左移</strong><code>COUNT_BITS</code>位来定义的，这样就把状态值放到了整数的最高3位。</p><p>例如：</p><p><code>RUNNING</code>状态的值为<code>-1</code>左移29位，<code>-1</code> 的二进制表示为<code>1111 1111 1111 1111 1111 1111 1111 1111</code>，共32个1。</p><p>-1 &lt;&lt; 29 = <code>1110 0000 0000 0000 0000 0000 0000 0000</code>，其中高3位是<code>111</code>表示的就是线程池处于 RUNNING状态。</p><h2 id="线程池核心参数" tabindex="-1">线程池核心参数 <a class="header-anchor" href="#线程池核心参数" aria-label="Permalink to &quot;线程池核心参数&quot;">​</a></h2><ul><li>corePoolSize：核心线程数，空闲了也不会销毁，除非设置了允许销毁核心线程（allowCoreThreadTimeOut）。</li><li>maximumPoolSize：线程池允许的最大线程数</li><li>keepAliveTime：当线程数大于核心线程数时，多余空闲的线程在这个时间内还没有等到新任务就会被销毁</li><li>unit：keepAliveTime的时间单位</li><li>workQueue：存放还未被线程执行的任务</li><li>threadFactory：线程工厂，可以自定义设置线程池中线程的线程名称等</li><li>handler：拒绝策略，但线程池无法执行新增的线程时，是抛弃还是其他策略。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ThreadPoolExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> corePoolSize,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                              int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maximumPoolSize,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                              long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keepAliveTime,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              TimeUnit unit,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              BlockingQueue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Runnable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> workQueue,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              ThreadFactory threadFactory,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              RejectedExecutionHandler handler) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (corePoolSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            maximumPoolSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            maximumPoolSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> corePoolSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            keepAliveTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IllegalArgumentException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (workQueue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> threadFactory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NullPointerException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.acc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSecurityManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                AccessController.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.corePoolSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> corePoolSize;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.maximumPoolSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maximumPoolSize;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.workQueue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> workQueue;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.keepAliveTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toNanos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(keepAliveTime);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.threadFactory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> threadFactory;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handler;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><h2 id="线程池执行任务流程" tabindex="-1">线程池执行任务流程 <a class="header-anchor" href="#线程池执行任务流程" aria-label="Permalink to &quot;线程池执行任务流程&quot;">​</a></h2><ol><li>当工作线程数小于核心线程数时，新任务来临，会启动新线程执行任务。</li><li>当工作线程数大于核心线程数且小于最大线程数时，新任务会保存到队列当中等待线程执行。</li><li>当队列满了且核心线程数小于最大线程数时，新任务会创建新线程执行。</li><li>当队列已满且工作线程数达到最大线程数时，线程池会触发拒绝策略由RejectedExecutionHandler处理。</li><li>先线程池中线程数超过核心线程数，空闲时间超过keepAliveTime时，空闲线程会被销毁。</li></ol><h3 id="线程池拒绝策略" tabindex="-1">线程池拒绝策略 <a class="header-anchor" href="#线程池拒绝策略" aria-label="Permalink to &quot;线程池拒绝策略&quot;">​</a></h3><p><code>RejectedExecutionHandler</code> 接口的实现类有四种，所以默认有四种拒绝策略：</p><p>**AbortPolicy：**直接抛出异常，阻止系统正常运行。可以根据业务逻辑选择重试或者放弃提交等策略。</p><p>**CallerRunsPolicy ：**只要线程池未关闭，该策略直接在调用者线程中，运行当前被丢弃的任务。</p><p>不会造成任务丢失，同时减缓提交任务的速度，给执行任务缓冲时间。</p><p>**DiscardOldestPolicy ：**丢弃最老的一个请求，也就是即将被执行的任务，并尝试再次提交当前任务。</p><p>**DiscardPolicy ：**该策略默默地丢弃无法处理的任务，不予任何处理。如果允许任务丢失，这是最好的一种方案。</p><h2 id="executors提供的几种线程池" tabindex="-1">Executors提供的几种线程池 <a class="header-anchor" href="#executors提供的几种线程池" aria-label="Permalink to &quot;Executors提供的几种线程池&quot;">​</a></h2><ul><li><strong>newSingleThreadExecutor()</strong>：只有一个线程的线程池，任务是顺序执行，适用于一个一个任务执行的场景</li><li><strong>newCachedThreadPool()</strong>：线程池里有很多线程需要同时执行，60s内复用，适用执行很多短期异步的小程序或者负载较轻的服务</li><li><strong>newFixedThreadPool()</strong>：拥有固定线程数的线程池，如果没有任务执行，那么线程会一直等待，适用执行长期的任务。</li><li><strong>newScheduledThreadPool()</strong>：用来调度即将执行的任务的线程池</li><li><strong>newWorkStealingPool()</strong>：底层采用forkjoin的Deque，采用独立的任务队列可以减少竞争同时加快任务处理</li></ul><table tabindex="0"><thead><tr><th>参数</th><th style="text-align:center;">FixedThreadPool</th><th style="text-align:center;">CachedThreadPool</th><th style="text-align:center;">ScheduledThreadPool</th><th style="text-align:center;">SingleThreadExecutor</th><th style="text-align:center;">SingleScheduledThreadPool</th></tr></thead><tbody><tr><td>corePoolSize</td><td style="text-align:center;">构造函数传入</td><td style="text-align:center;">0</td><td style="text-align:center;">构造函数传入</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td></tr><tr><td>maxPoolSize</td><td style="text-align:center;">同corePoolSize</td><td style="text-align:center;">Integer.MAX_VALUE</td><td style="text-align:center;">Integer.MAX_VALUE</td><td style="text-align:center;">1</td><td style="text-align:center;">Integer.MAX_VALUE</td></tr><tr><td>keepAliveTime</td><td style="text-align:center;">0</td><td style="text-align:center;">60s</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td></tr></tbody></table><h2 id="建议开发规范" tabindex="-1">建议开发规范 <a class="header-anchor" href="#建议开发规范" aria-label="Permalink to &quot;建议开发规范&quot;">​</a></h2><p>阿里Java开发手册中提到，【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方</p><p>式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</p><p>Executors 返回的线程池对象的弊端如下：</p><ol><li><p>FixedThreadPool 和 SingleThreadPool：允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。</p></li><li><p>CachedThreadPool：允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</p></li><li><p>ScheduledThreadPool：允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。</p></li></ol><p>根据业务独立配置线程池，将较慢服务与主线程池隔离开。</p><p>创建线程池使用线程工厂指定形成名称，方便出错时排查。</p><p>线程资源必须由线程池提供，不允许自行在程序中显示创建线程。</p><h1 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h1><ol><li><a href="https://mp.weixin.qq.com/s/IVgGXQKU1QiT1ToN2wXHJg" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/IVgGXQKU1QiT1ToN2wXHJg</a></li><li><a href="https://mp.weixin.qq.com/s/icrrxEsbABBvEU0Gym7D5Q" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/icrrxEsbABBvEU0Gym7D5Q</a></li><li><a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html" target="_blank" rel="noreferrer">https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html</a></li></ol>`,34);function g(c,y,F,A,D,u){const t=n("Mermaid");return s(),h("div",null,[E,(s(),e(k,null,{default:i(()=>[p(t,{id:"mermaid-18",class:"mermaid my-class",graph:"classDiagram%0A%20%20%20%20class%20Executor%20%7B%0A%20%20%20%20%09%20execute(Runnable%20command)%0A%20%20%20%20%7D%0A%20%20%20%20class%20ExecutorService%20%7B%0A%20%20%20%20%09shutdown()%0A%20%20%20%20%09isShutdown()%20boolean%0A%20%20%20%20%09isTerminated()%20boolean%0A%20%20%20%20%20%20submit(Callable~T~%20task)%20Future~T~%0A%20%20%20%20%7D%0A%20%20%20%20class%20ThreadPoolExecutor%20%7B%0A%20%20%20%20%09execute(Runnable%20command)%0A%20%20%20%20%7D%0A%20%20%20%20Executor%20%3C%7C--%20ExecutorService%0A%20%20%20%20ExecutorService%20%3C%7C..%20AbstractExecutorService%0A%20%20%20%20AbstractExecutorService%20%3C%7C--%20ThreadPoolExecutor%0A"})]),fallback:i(()=>[r(" Loading... ")]),_:1})),o])}const T=l(d,[["render",g]]);export{m as __pageData,T as default};
