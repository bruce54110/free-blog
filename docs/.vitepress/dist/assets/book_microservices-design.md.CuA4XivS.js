import{_ as a,c as i,o as e,a2 as l}from"./chunks/framework.BBCWOUBu.js";const b=JSON.parse('{"title":"微服务设计（第2版）读书笔记","description":"","frontmatter":{},"headers":[],"relativePath":"book/microservices-design.md","filePath":"book/microservices-design.md"}'),r={name:"book/microservices-design.md"},o=l('<h1 id="微服务设计-第2版-读书笔记" tabindex="-1">微服务设计（第2版）读书笔记 <a class="header-anchor" href="#微服务设计-第2版-读书笔记" aria-label="Permalink to &quot;微服务设计（第2版）读书笔记&quot;">​</a></h1><h1 id="微服务概述" tabindex="-1">微服务概述 <a class="header-anchor" href="#微服务概述" aria-label="Permalink to &quot;微服务概述&quot;">​</a></h1><h1 id="什么是微服务" tabindex="-1">什么是微服务？ <a class="header-anchor" href="#什么是微服务" aria-label="Permalink to &quot;什么是微服务？&quot;">​</a></h1><p>答：微服务（microservice）是基于业务领域建模的，可独立发布的服务。它会把业务内聚的功能封装起来，并通过网络供其他服务访问。将这样的服务组合起来构建出更复杂的系统。</p><hr><h1 id="微服务特点" tabindex="-1">微服务特点 <a class="header-anchor" href="#微服务特点" aria-label="Permalink to &quot;微服务特点&quot;">​</a></h1><ol><li>可独立部署</li><li>围绕业务领域建模</li><li>状态自主，避免微服务之间共享数据库</li><li>服务大小，服务接口要可控</li><li>灵活性，微服务在<strong>组织、技术、规模、健壮性</strong>等多个具有可观的灵活性</li><li>架构和组织的一致性</li></ol><hr><h1 id="微服务与单体" tabindex="-1">微服务与单体 <a class="header-anchor" href="#微服务与单体" aria-label="Permalink to &quot;微服务与单体&quot;">​</a></h1><h2 id="单体" tabindex="-1">单体 <a class="header-anchor" href="#单体" aria-label="Permalink to &quot;单体&quot;">​</a></h2><p>“系统中的所有功能必须一起部署时，我们可以视它为一个单体。</p><p>单体又细分为，单进程单体，模块化单体（依然是单进程），分布式单体</p><h2 id="单体的优势" tabindex="-1">单体的优势 <a class="header-anchor" href="#单体的优势" aria-label="Permalink to &quot;单体的优势&quot;">​</a></h2><p>开发流程简单，系统监控，故障排除和测试工作大大简化</p><h2 id="微服务的优势" tabindex="-1">微服务的优势 <a class="header-anchor" href="#微服务的优势" aria-label="Permalink to &quot;微服务的优势&quot;">​</a></h2><ol><li>技术的异构性，可以针对不同微服务业务特性使用不同技术，满足不同业务的不同诉求。</li><li>健壮性，实现故障隔离。</li><li>扩展性，扩展灵活，只需要按需扩展需要的微服务。</li><li>部署便捷</li><li>组织协调</li><li>可组合</li></ol><h2 id="微服务的痛点" tabindex="-1">微服务的痛点 <a class="header-anchor" href="#微服务的痛点" aria-label="Permalink to &quot;微服务的痛点&quot;">​</a></h2><ol><li>开发者体验，本地开发需要启动微服务多。</li><li>技术过载，引入大量新技术。</li><li>成本，</li><li>生成报表的成本变高</li><li>监控和故障排除较复杂，需要引入分布式可观测</li><li>安全，数据传输跨多服务，对安全性提出了更高的要求。</li><li>测试成本变大</li><li>延迟，数据在微服务之间进行序列化传输反序列化，容易造成系统延迟问题</li><li>数据一致性挑战</li></ol><h1 id="微服务建模" tabindex="-1">微服务建模 <a class="header-anchor" href="#微服务建模" aria-label="Permalink to &quot;微服务建模&quot;">​</a></h1><p>合理划分微服务边界</p><p>领域驱动设计</p><ul><li>(未完待续)</li></ul>',22),t=[o];function h(s,n,c,d,u,_){return e(),i("div",null,t)}const p=a(r,[["render",h]]);export{b as __pageData,p as default};
